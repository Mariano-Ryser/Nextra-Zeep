{"/Cpp/OOPS":{"title":"Oops","data":{"object-oriented-programming-in-c#Object-Oriented Programming in C++":"Object- oriented programming (OOP) is a programming paradigm\r\nbased on the concept of \"objects\", which can contain data and code that manipulates that data.C++ supports OOP, and it involves kez concepts such as classes, objects,\r\ninheritance, polymorphism, encapsulation, and abstraction.","classes-and-objects#Classes and objects":"A class is a blueprint for creating objects (instances). It defines a data\r\nstructure by bundling data (attributes) and methods (functions) that\r\noperate on the data.","vamos-con-algunos-ejemplos#Vamos con algunos ejemplos.":"------ Defining a Class -------\r\n\r\nclass Rectangle {\r\n    public:\r\n        int width, height;\r\n\r\n        int Area(){\r\n            return width * height\r\n        }\r\n}\r\n\r\n------ Creating Objects -------\r\n\r\nint main(){\r\n    Rectangle rect; //Create an object of Rectangle\r\n    rect.width = 5;\r\n    rect.height = 10;\r\n\r\n    cout << \"Area: \" << rect.area() << endl; // Output: Area: 50\r\n    return 0;\r\n}","member-functions#Member Functions":"Member functions are Functions defined inside a class.\r\nThey operate on the data members of the class.\n------ Defining Meber Functions -------\r\n\r\nclass Rectangle {\r\npublic:\r\n    int width, height;\r\n\r\n    int area(){\r\n        return width * height;\r\n    }\r\n\r\n    void setDimensions(int w, int h){\r\n        width = w;\r\n        height = h;\r\n    }\r\n}\r\n\r\n------ Using Meber Functions -------\r\n\r\nint main(){\r\n    Rectangle rect;\r\n    rect.setDimensions(5, 10);\r\n\r\n    cout << \"Area: \" << rect.area() << endl; // Ouput Area: 50\r\n    return 0;\r\n}\r\nWhat we did above, is to use the inner function of the rectangle to add the dimensions."}},"/Cpp/calculadora":{"title":"Creamos y una simple calculadora","data":{"":"Aqui creamos una calculadora donde atravez del switch nos da la\r\nopcion de elegir los numeros y la operacion a realizar.\n#include <iostream>\r\n\r\n\r\nint main() {\r\n\r\n    char op;\r\n    double num1;\r\n    double num2;\r\n    double result;\r\n\r\n    std::cout << \"*************CALCULATOR***********\\n\";\r\n\r\n    std::cout << \"Enter either (+ - * /): \";\r\n    std::cin >> op;\r\n\r\n    std::cout << \"Enter N1:\"\" \";\r\n    std::cin >> num1;\r\n\r\n    std::cout << \"Enter N2:\"\" \";\r\n    std::cin >> num2;\r\n\r\n    switch(op){\r\n        case '+':\r\n            result = num1 + num2;\r\n        std::cout << \"result \"<< result <<\"\\n\";\r\n        break;\r\n        case '-':\r\n            result = num1 - num2;\r\n        std::cout << \"result \"<< result <<\"\\n \";\r\n        break;\r\n        case '*':\r\n            result = num1 * num2;\r\n        std::cout << \"result \"<< result <<\"\\n \";\r\n        break;\r\n        case '/':\r\n            result = num1 / num2;\r\n        std::cout << \"result \"<< result <<\"\\n \";\r\n        break;\r\n        default:\r\n            std::cout << \"That wasn't a valid response\" << \"\\n \";\r\n    }\r\n\r\n\r\n    std::cout << \"************************\";\r\n\r\n    return 0;\r\n}"}},"/Cpp/helloWorld":{"title":"Esquema principal","data":{"welcome-c-guide#Welcome C++ Guide":"datos sacados de https://www.youtube.com/watch?v=-TkoO8Z07hI\n\r\n#include <iostream>\r\n\r\nint main() {\r\n    return 0;\r\n}\r\n\r\n#include <iostream>\r\n\r\nint main() {\r\n    std::cout << \"Hello, World!\" << std::endl;\r\n    return 0;\r\n}\r\n\r\n#include <iostream>\r\n\r\nint main() {\r\n\r\n    int number = 45;\r\n    std::cout << number << std::endl;\r\n    return 0;\r\n}"}},"/Cpp/visualStudio":{"title":"Visualstudio","data":{"como-correr-cpp-en-visual-studio-code#Como correr cpp en Visual Studio code":"Paso 1: Instalar MSYS2\r\nSi aún no has instalado MSYS2:\nDescarga el instalador desde la página oficial de MSYS2.\nEjecuta el instalador y sigue las instrucciones para completar la instalación.\nAbre la terminal de MSYS2 y actualiza el sistema con los siguientes comandos:"}},"/Cpp/ternaryOperator":{"title":"Operacion Ternaria","data":{"":"If, Else de una forma compleja\nint main() {\r\n\r\n    int grade = 45;\r\n\r\n    if(grade >= 80)\r\n    {\r\n        std::cout << \"You fail! !\";\r\n    }\r\n    else{\r\n        std::cout << \"You pass !\";\r\n    }\r\n    return 0;\r\n}\r\n\r\n//Este resultado seria \"You pass!\"\nAqui la opcion reducida y mas corta,\r\nActualmente React Js tiene la misma sintaxis\nint main() {\r\n\r\n  int grade = 75;\r\n\r\n  grade >= 60 ? std::cout << \"You fail! !\" : std::cout << \"You pass !\";\r\n\r\n   return 0;\r\n}\r\n\r\n//Este resultado seria \"You fail!\"\r\nel simbolo \"!\" antes de la variable significa la negacion de la misma.\nint main() {\r\n\r\n  bool hungry = true;\r\n\r\n  !hungry ? std::cout << \"You are hungry !\" : std::cout << \"You are full !\";\r\n   \r\n   return 0;\r\n}\r\n\r\n//Este resultado seria \"You are full!\"\r\nOtra opcion\nint main() {\r\n\r\n  bool hungry = true;\r\n\r\n    std::count << (hungry ? \"You are hungry\" : \"You are full\");\r\n  \r\n   return 0;\r\n}\r\n\r\n//Este resultado seria \"You are full!\""}},"/Git/git":{"title":"Git","data":{"":"Mosh Cursehttps://www.youtube.com/watch?v=8JJ101D3knE\n18:27\nCommand line is faster and easiergit config --global -e\r\ngit config --global core.autocrlf true\r\ngit config --helpgit init //para iniciar un repositorio local //to see \"ls -a\"git -rf .git  // delete git repository"}},"/MDX/ejemplosMDX":{"title":"Ejemplosmdx","data":{"hello-mdx#Hello MDX":"Clicks: \nWrite the press release\nUpdate the website\nContact the media","highlighting-lines#Highlighting Lines":"You can highlight specific lines of code by adding a  attribute to the code block:\nimport { useState } from 'react'\r\n \r\nfunction Counter() {\r\n  const [count, setCount] = useState(0)\r\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\r\n}","highlighting-substrings#Highlighting Substrings":"You can highlight specific substrings of code by adding a // attribute to the code block:\nimport { useState } from 'react'\r\n \r\nfunction Counter() {\r\n  const [count, setCount] = useState(0)\r\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\r\n}\nSyntax\tDescription\tTest Text\tHeader\tTitle\tHere's this\tParagraph\tText\tAnd more\tStrikethrough\t\tText","long-heading-about-nextra#Long heading about Nextra":"import Link from 'next/link'\r\n\r\nexport default function Home() {\r\n  return (\r\n    <>\r\n\r\n  <Link href=\"/\"><h3>/home</h3></Link>\r\n  <Link href=\"/proyectos/proyects\"><h3>/home/proyects</h3></Link>\r\n  <Link href=\"/test/test\"><h3>/home/test</h3></Link>\r\n\r\n\r\n  <style jsx>{`\r\n\r\n          // Aqui escribo el estilado\r\n          \r\n    `}</style>\r\n    </>\r\n  )\r\n}\r\nprint('hello, world')\nInlined syntax highlighting is also supported let x = 1{:jsx} via:\nimport { useState } from 'react'\r\n \r\nfunction Counter() {\r\n  const [count, setCount] = useState(0)\r\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\r\n}","copy-button#Copy Button":"By adding a copy attribute, a copy button will be added to the code block when the user hovers over it:\nconsole.log('hello, world')","linea-con-numeros#Linea Con numeros":"import { useState } from 'react'\r\n \r\nfunction Counter() {\r\n  const [count, setCount] = useState(0)\r\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\r\n}","filenames-and-titles#Filenames and Titles":"You can add a filename or a title to your code blocks by adding a filename attribute:\nconsole.log('hello, world')\n\u001b[0m \u001b[0;32m✓\u001b[0m \u001b[0;2msrc/\u001b[0mindex\u001b[0;2m.test.ts (1)\u001b[0m\r\n  \u001b[0;2m Test Files \u001b[0m \u001b[0;1;32m1 passed\u001b[0;98m (1)\u001b[0m\r\n  \u001b[0;2m      Tests \u001b[0m \u001b[0;1;32m1 passed\u001b[0;98m (1)\u001b[0m\r\n  \u001b[0;2m   Start at \u001b[0m 23:32:41\r\n  \u001b[0;2m   Duration \u001b[0m 11ms\r\n  \u001b[42;1;39;0m PASS \u001b[0;32m Waiting for file changes...\u001b[0m\r\n         \u001b[0;2mpress \u001b[0;1mh\u001b[0;2m to show help, press \u001b[0;1mq\u001b[0;2m to quit"}},"/MDX/nextraComponents":{"title":"Nextracomponents","data":{"":"Space Invaders is a 1978 shoot 'em up arcade game developed by Tomohiro\r\nNishikado.\nToday is Friday.\nThis API will be deprecated soon.\nThis is a dangerous feature that can cause everything to explode.","tabs#Tabs":"pnpm: Fast, disk space efficient package manager.\nnpm is a package manager for the JavaScript programming language.\nYarn is a software packaging system.\r\nis a software packaging system.\\  is a software packaging system.\\  is a software packaging system.\\   is a software packaging system\nis a software packaging system.\nmr      cm        df\r\nis a software packaging system.\nis a software packaging system.\nis a software packaging system.\nis a software packaging system.\nis a software packaging system.\nis a software packaging system.\nis a software packaging system.\nis a software packaging system.","steps#Steps":"","step-1#Step 1":"Contents for step 1.","step-2#Step 2":"Contents for step 2.","file-tree#FILE TREE!":"","espaciado-para-abajo-con-shlash-invertido#Espaciado para abajo con Shlash invertido":"Espaciado para abajo \nEspaciado para abajo \nEspaciado para abajo \nEspaciado para abajo \\"}},"/Mongo/intro":{"title":"Intro","data":{"":"MongoDBThe MongoDB database is the foundation of MongoDB Atlas.\r\nThe additional functionality that Atlas offers—such as full-text search,\r\ndata visualization, data lake storage, and mobile device sync—are built\r\non top of data stored in cloud-hosted MongoDB database deployments.MongoDB has a flexible schema model, which means that documents in the\r\nsame collection are not required to share a common structure of fields\r\nand value types by default.\n{\r\n  \"username\": \"vreddy\",\r\n  \"name\": \"Vasanti Reddy\",\r\n  \"email\": \"vreddy1@gmail.com\",\r\n  \"location\": {\r\n    \"city\": \"Delhi\",\r\n    \"country\": \"India\"\r\n  }\r\n}\r\n\r\nAdd.. Social_media \r\n\r\n{\r\n  \"username\": \"avasa\",\r\n  \"name\": \"Asad Vasa\",\r\n  \"email\": \"avasa1@yahoo.com\",\r\n  \"social_media\": {\r\n    \"Twitter\": \"avasa\",\r\n    \"Instagram\": \"Asad101\",\r\n    \"LinkedIn\": \"AsadVasa\"\r\n  },\r\n  \"location\": {\r\n    \"city\": \"Los Angeles\",\r\n    \"country\": \"United States\"\r\n  }\r\n}"}},"/Mongo/node":{"title":"Updating Documents in Node.js Applications","data":{"using-updateone#Using updateOne()":"In this example, we use the updateOne() to update the value of an existing\r\nfield in a document. Append the updateOne() method to the collection object\r\nto update a single document that matches the filter criteria, which are\r\nstored in the documentToUpdate variable. The update document contains\r\nthe changes to be made and is stored in the update variable.\n\r\nconst dbname = \"bank\"\r\nconst collection_name = \"accounts\"\r\n\r\nconst accountsCollection = client.db(dbname).collection(collection_name)\r\n\r\nconst documentToUpdate = { _id: ObjectId(\"62d6e04ecab6d8e130497482\") }\r\n\r\nconst update = { $inc: { balance: 100 } }\r\n\r\n\r\nconst main = async () => {\r\n  try {\r\n    await connectToDatabase()\r\n    let result = await accountsCollection.updateOne(documentToUpdate, update)\r\n    result.modifiedCount === 1\r\n      ? console.log(\"Updated one document\")\r\n      : console.log(\"No documents updated\")\r\n  } catch (err) {\r\n    console.error(`Error updating document: ${err}`)\r\n  } finally {\r\n    await client.close()\r\n  }\r\n}\r\n\r\nmain()","using-updatemany#Using updateMany()":"In this example, we update many documents by adding a value to\r\nthe transfers_complete array of all checking account documents.\r\nThe updateMany() method is appended to the collection object. The method accepts\r\na filter that matches the document(s) that we want to update and an update\r\nstatement that instructs the driver how to change the matching document.\r\nBoth the filter and the update documents are stored in variables.\r\nThe updateMany() method updates all the documents in the collection\r\nthat match the filter.\nconst database = client.db(dbname);\r\nconst bank = database.collection(collection_name);\r\n\r\nconst documentsToUpdate = { account_type: \"checking\" };\r\n\r\nconst update = { $push: { transfers_complete: \"TR413308000\" } }\r\n\r\nconst main = async () => {\r\n  try {\r\n    await connectToDatabase()\r\n    let result = await accountsCollection.updateMany(documentsToUpdate, update)\r\n    result.modifiedCount > 0\r\n      ? console.log(`Updated ${result.modifiedCount} documents`)\r\n      : console.log(\"No documents updated\")\r\n  } catch (err) {\r\n    console.error(`Error updating documents: ${err}`)\r\n  } finally {\r\n    await client.close()\r\n  }\r\n}\r\n\r\nmain()","using-deleteone#Using deleteOne()":"To delete a single document from a collection, use the deleteOne()\r\nmethod on a collection object. This method accepts a query filter that\r\nmatches the document that you want to delete. If you do not specify a filter,\r\nMongoDB matches and deletes the first document in the collection. Here's an\r\nexample:\nconst dbname = \"bank\"\r\nconst collection_name = \"accounts\"\r\n\r\nconst accountsCollection = client.db(dbname).collection(collection_name)\r\n\r\nconst documentToDelete = { _id: ObjectId(\"62d6e04ecab6d8e13049749c\") }\r\n\r\nconst main = async () => {\r\n  try {\r\n    await connectToDatabase()\r\n    let result = await accountsCollection.deleteOne(documentToDelete)\r\n    result.deletedCount === 1\r\n      ? console.log(\"Deleted one document\")\r\n      : console.log(\"No documents deleted\")\r\n  } catch (err) {\r\n    console.error(`Error deleting documents: ${err}`)\r\n  } finally {\r\n    await client.close()\r\n  }\r\n}\r\n\r\nmain()","using-deletemany#Using deleteMany()":"You can delete multiple documents from a collection in a single\r\noperation by calling the deleteMany() method on a collection object. To\r\nspecify which documents to delete, pass a query filter that matches the\r\ndocuments that you want to delete. If you provide an empty document, MongoDB\r\nmatches all documents in the collection and deletes them. In the following\r\nexample, we delete all accounts with a balance of less than 500 by using a\r\nquery filter. Then, we print the total number of deleted documents.\nconst dbname = \"bank\"\r\nconst collection_name = \"accounts\"\r\n\r\nconst accountsCollection = client.db(dbname).collection(collection_name)\r\n\r\nconst documentsToDelete = { balance: { $lt: 500 } }\r\n\r\nconst main = async () => {\r\n try {\r\n   await connectToDatabase()\r\n   let result = await accountsCollection.deleteMany(documentsToDelete)\r\n   result.deletedCount > 0\r\n     ? console.log(`Deleted ${result.deletedCount} documents`)\r\n     : console.log(\"No documents deleted\")\r\n } catch (err) {\r\n   console.error(`Error deleting documents: ${err}`)\r\n } finally {\r\n   await client.close()\r\n }\r\n}\r\n \r\nmain()","creating-a-bank-transaction#Creating a Bank Transaction":"Create variables used in the transaction.\n// Collections\r\nconst accounts = client.db(\"bank\").collection(\"accounts\")\r\nconst transfers = client.db(\"bank\").collection(\"transfers\")\r\n\r\n// Account information\r\nlet account_id_sender = \"MDB574189300\"\r\nlet account_id_receiver = \"MDB343652528\"\r\nlet transaction_amount = 100\nStart a new session.\nconst session = client.startSession()\nBegin a transaction with the WithTransaction() method on the session.\nconst transactionResults = await session.withTransaction(async () => {\r\n  // Operations will go here\r\n})\nUpdate the balance field of the sender’s account by decrementing the\r\ntransaction_amount from the balance field.\nconst senderUpdate = await accounts.updateOne(\r\n  { account_id: account_id_sender },\r\n  { $inc: { balance: -transaction_amount } },\r\n  { session }\r\n)\nUpdate the balance field of the receiver’s account by incrementing\r\nthe transaction_amount to the balance field.\nconst receiverUpdate = await accounts.updateOne(\r\n  { account_id: account_id_receiver },\r\n  { $inc: { balance: transaction_amount } },\r\n  { session }\r\n)\r\nCreate a transfer document and insert it into the transfers collection.\nconst transfer = {\r\n  transfer_id: \"TR21872187\",\r\n  amount: 100,\r\n  from_account: account_id_sender,\r\n  to_account: account_id_receiver,\r\n}\r\n\r\nconst insertTransferResults = await transfers.insertOne(transfer, { session })\nUpdate the transfers_complete array of the sender’s account by adding the\r\ntransfer_id to the array.\nconst updateSenderTransferResults = await accounts.updateOne(\r\n  { account_id: account_id_sender },\r\n  { $push: { transfers_complete: transfer.transfer_id } },\r\n  { session }\r\n)\nUpdate the transfers_complete array of the receiver’s account by adding\r\nthe transfer_id to the array.\nconst updateReceiverTransferResults = await accounts.updateOne(\r\n  { account_id: account_id_receiver },\r\n  { $push: { transfers_complete: transfer.transfer_id } },\r\n  { session }\r\n)\nLog a message regarding the success or failure of the transaction.\nif (transactionResults) {\r\n  console.log(\"Transaction completed successfully.\")\r\n} else {\r\n  console.log(\"Transaction failed.\")\r\n}\r\nCatch any errors and close the session.\n catch (err) {\r\n  console.error(`Transaction aborted: ${err}`)\r\n  process.exit(1)\r\n} finally {\r\n  await session.endSession()\r\n  await client.close()\r\n}\nhttps://www.mongodb.com/docs/drivers/node/current/quick-reference/"}},"/home":{"title":"C + +","data":{"":"Hallo Welcome\nActually im learning C++, and you meaby te\r\nestaras preguntando, why??\r\nwhy you need to learn something like that.Idk aber..  you now..., you now meen... i think that, this leanguages ist very very\r\nimportant.\r\nin the Zukunft you need to verstehen wft nos rodea.No quiero asustaros pero. no soy una maquina, soy un ser humano\r\nescribiendo con el teclado en este preciso momento. y a su ves practicando\r\nescribir un poco de ingles y aleman.Y porque !?? te estaras preguntando, es que !! necesito manchmal\r\nschreiben auf deutsch oder english becouse...es donde Ich wohne.los tironeos estrategicos de la Historia.\r\nLos vivo a diario en el trabajo y la vida cotidiana.y porque !!! ? quieres entender??no es eso.. solo son vivencias.\nOJO! ATENCION!\r\nmira con cuidado el borde izquierdo del numero 1.\n1: Fast, disk space efficient package manager.\n2: # C + +  programming language.\nC + +  programming language."}},"/":{"title":"Welcome to Nextra-Zeep","data":{}},"/Mongo/mongobash":{"title":"Mongobash","data":{"":"insertOne()\r\ninsertMany()\r\n\r\nfind({ titulo : \"example\" })\r\n\r\npara encontrar varios valores un ejemplo\r\n$in \r\n\r\ndb.comentars.find({ city: {$in: [\"PHENIX\" , \"CHICAGO\"] } });\r\n\r\nOperators Comparison\r\n\r\n$gt (greater than)\r\n$gte (greater than or equal to)\r\n$lt (less than)\r\n$lt (less than or equal to)\r\n\r\n\r\n\"field.nestedfield\"\r\n\r\ndb.sales.find({ \"items.price\": { $gt: 50}})\r\ndb.sales.find({ \"customer.age\": { $lte: 65}})\r\n\r\nelemMatch()\r\n\r\n\r\n\r\ndb.routes.find({\r\n  $and: [\r\n    { $or: [{ dst_airport: \"SEA\" }, { src_airport: \"SEA\" }] },\r\n    { $or: [{ \"airline.name\": \"American Airlines\" }, { airplane: 320 }] },\r\n  ]\r\n})\r\n\r\n\r\nCRUD 1 - Inserting and Finding Documents\r\nIn this unit, we learned how to insert and find documents in a collection with\r\n MongoDB. We also built queries with the following comparison operators:\r\n\r\n$gt (Greater Than)\r\n\r\n$lt (Less Than)\r\n\r\n$lte ( Less Than or Equal To)\r\n\r\n$gte (Greater Than or Equal To)\r\n\r\nWe also used the following logical operators:\r\n\r\n$and\r\n\r\n$or\r\n\r\nupdateOne()\r\n\r\ndb.collection.updateOne(\r\n    <filter>,\r\n    <update>,\r\n    <options>, // example upser\r\n)\r\n\r\n\r\n.push() // to add document\r\n.set() // to modify document\r\n\r\n\r\n\r\n\r\n\r\n//Ejemplo para incrementar 1 en el documento downloads\r\n\r\nCustomers\r\n[\r\n  {\r\n    _id: ObjectId(\"66782eaf0a1b18b129d5e091\"),\r\n    name: 'Mariano',\r\n    city: 'Japon',\r\n    edad: 55\r\n  },\r\n  {\r\n    _id: ObjectId(\"667831395ed6b0c700cc7839\"),\r\n    name: 'Pedro',\r\n    edad: 65,\r\n    city: 'Zurich'\r\n  }\r\n]\r\n\r\n//Funcion para aumentar edad\r\n db.customers.findAndModify({\r\n    query:{ _id: ObjectId(\"66782eaf0a1b18b129d5e091\")},\r\n    update:{ $inc: { edad: 1 } },\r\n    new: true\r\n })\r\n\r\n\r\n\r\n ///UPDATE MANY()\r\n\r\n db.books.updateMany({\r\n    publishedDate:{ $lt: ISODate(\"2019-01-T08:00:00.000Z\")},\r\n    $set: { status: \"LEGACY\" }\r\n })\r\n\r\n deleteOne({ _id: ObjectId(\"66782eaf0a1b18b129d5e091\")})\r\n db.books.deleteMany({category\"crime\"})\r\n\r\n db.podcasts.deleteOne({ _id: Objectid(\"6282c9862acb966e76bbf20a\") })\r\n\r\n db.podcasts.deleteMany({category: “crime”})\r\n\r\n                            //solo indica que traiga los names.\r\n                            //tmabien se puede agregar mas documentos.\r\n                            //ejemplo \r\n                                    categorias a traer  /   - decendiente\r\ndb.movies.find({category: terror },{name:1, surname:1}).sort({name: -1})\r\n\r\n\r\n//solo traigo los deleteados, y con el texto.\r\ndb.comentars.find({deleted:false},{text:1})\r\n\r\n\r\n// Return all inspections with result of \"Pass\" or \"Warning\" \r\n- exclude date and zip code\r\ndb.inspections.find(\r\n  { result: { $in: [\"Pass\", \"Warning\"] } },\r\n  { date: 0, \"address.zip\": 0 }\r\n)\r\n\r\ndb.comentars.countDocuments({deleted:true})\r\n\r\n\r\nCount Documents\r\nUse db.collection.countDocuments() to count the number of documents\r\n that match a query. countDocuments() takes two parameters: a query \r\n document and an options document.\r\n\r\nSyntax:\r\n\r\ndb.collection.countDocuments( <query>, <options> )\r\nThe query selects the documents to be counted.\r\n\r\nExamples:\r\n\r\n// Count number of docs in trip collection\r\ndb.trips.countDocuments({})\r\n// Count number of trips over 120 minutes by subscribers\r\ndb.trips.countDocuments({ tripduration: { $gt: 120 }, usertype: \"Subscriber\" })"}}}